{"ast":null,"code":"import _defineProperty from \"/home/tinman/dev-projects/react/crown-clothing/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  // check if item exists in current cartItems[] array\n  const existingItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); // increase quantity if existingItem\n\n  if (existingItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  } // return cartItems with the NEW_ITEM\n\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(\n    /* \n        if (item ID is not equal to cartItemToRemove.id)\n            return it inside the cartItems array (INCLUDE IT)\n        else\n            filter it out (REMOVE IT)\n    */\n    cartItem => cartItem.id !== cartItemToRemove.id);\n  } // if quantity > 1\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? _objectSpread({}, cartItem, {\n    quantity: cartItem.quantity - 1\n  }) : cartItem);\n};","map":{"version":3,"sources":["/home/tinman/dev-projects/react/crown-clothing/client/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","existingCartItem","filter"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD;AACA,QAAMC,YAAY,GAAGF,SAAS,CAACG,IAAV,CACjBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADzB,CAArB,CAFuD,CAMvD;;AACA,MAAIH,YAAJ,EAAkB;AACd,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACWD,QADX;AACqBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADnD,SAEMH,QAHH,CAAP;AAKH,GAbsD,CAevD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,oBAAoBC,aAApB;AAAmCM,IAAAA,QAAQ,EAAE;AAA7C,KAAP;AACH,CAjBM;AAmBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D,QAAMC,gBAAgB,GAAGV,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB;;AAIA,MAAIK,gBAAgB,CAACH,QAAjB,KAA8B,CAAlC,EAAqC;AACjC,WAAOP,SAAS,CAACW,MAAV;AACH;;;;;;AAMAP,IAAAA,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAP1C,CAAP;AASH,GAf8D,CAiB/D;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,qBACWD,QADX;AACqBG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADnD,OAEMH,QAHH,CAAP;AAKH,CAvBM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n    // check if item exists in current cartItems[] array\n    const existingItem = cartItems.find(\n        cartItem => cartItem.id === cartItemToAdd.id\n    )\n\n    // increase quantity if existingItem\n    if (existingItem) {\n        return cartItems.map(cartItem =>\n            cartItem.id === cartItemToAdd.id\n                ? { ...cartItem, quantity: cartItem.quantity + 1 }\n                : cartItem\n        )\n    }\n\n    // return cartItems with the NEW_ITEM\n    return [...cartItems, { ...cartItemToAdd, quantity: 1 }]\n}\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find(\n        cartItem => cartItem.id === cartItemToRemove.id\n    )\n\n    if (existingCartItem.quantity === 1) {\n        return cartItems.filter(\n            /* \n                if (item ID is not equal to cartItemToRemove.id)\n                    return it inside the cartItems array (INCLUDE IT)\n                else\n                    filter it out (REMOVE IT)\n            */\n            cartItem => cartItem.id !== cartItemToRemove.id\n        )\n    }\n\n    // if quantity > 1\n    return cartItems.map(cartItem =>\n        cartItem.id === cartItemToRemove.id\n            ? { ...cartItem, quantity: cartItem.quantity - 1 }\n            : cartItem\n    )\n}\n"]},"metadata":{},"sourceType":"module"}