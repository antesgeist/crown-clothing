{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionsRef = firestore.collection('collections');\n    const snapshot = yield collectionsRef.get();\n    /* use call() to direct control to redux-saga\n    in case further async control is needed */\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // saga effect for creating actions / like dispatch\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/home/tinman/dev-projects/react/crown-clothing/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionsRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAIA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAI;AACA,UAAMC,cAAc,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMF,cAAc,CAACG,GAAf,EAAvB;AAEA;;;AAEA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAC7BI,+BAD6B,EAE7BO,QAF6B,CAAjC,CANA,CAWA;;AACA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GAbD,CAaE,OAAOC,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMjB,UAAU,CACZQ,eAAe,CAACU,uBADJ,EAEZT,qBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects'\n\nimport {\n    firestore,\n    convertCollectionsSnapshotToMap\n} from '../../firebase/firebase.utils'\nimport {\n    fetchCollectionsSuccess,\n    fetchCollectionsFailure\n} from './shop.actions'\n\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync() {\n    try {\n        const collectionsRef = firestore.collection('collections')\n        const snapshot = yield collectionsRef.get()\n\n        /* use call() to direct control to redux-saga\n        in case further async control is needed */\n        const collectionsMap = yield call(\n            convertCollectionsSnapshotToMap,\n            snapshot\n        )\n\n        // saga effect for creating actions / like dispatch\n        yield put(fetchCollectionsSuccess(collectionsMap))\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}\n\nexport function* shopSagas() {\n    yield all([call(fetchCollectionsStart)])\n}\n"]},"metadata":{},"sourceType":"module"}